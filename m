Return-Path: <linux-iio-owner@vger.kernel.org>
X-Original-To: lists+linux-iio@lfdr.de
Delivered-To: lists+linux-iio@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.lfdr.de (Postfix) with ESMTP id 22E4B130F31
	for <lists+linux-iio@lfdr.de>; Mon,  6 Jan 2020 10:08:12 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726133AbgAFJIL (ORCPT <rfc822;lists+linux-iio@lfdr.de>);
        Mon, 6 Jan 2020 04:08:11 -0500
Received: from mail-io1-f66.google.com ([209.85.166.66]:33384 "EHLO
        mail-io1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726050AbgAFJIL (ORCPT
        <rfc822;linux-iio@vger.kernel.org>); Mon, 6 Jan 2020 04:08:11 -0500
Received: by mail-io1-f66.google.com with SMTP id z8so47861793ioh.0
        for <linux-iio@vger.kernel.org>; Mon, 06 Jan 2020 01:08:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=konsulko.com; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=2YlbHKS1XSi1MOp30MGRF1UhRcwipJXrp79TUCElwhk=;
        b=Kv+hr4qb81q9+Q3FTXrRhgVuOhWwUkbQL0/+FVjy28Rk+i4TTC1xjEqKJltDSbEa4O
         st2h7nOGxTtH0xjM2J3my2HrmsHxqAzUJ94T0DHPnnupvsiCvr7/edu2DXoEbLr8IXxU
         m3PAhrpNeUJEodPEFufefQiR6WKbMw0IRNJe0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=2YlbHKS1XSi1MOp30MGRF1UhRcwipJXrp79TUCElwhk=;
        b=hriJpRiHgB+mY1wUt2VHcymXzm2xFKpleHptYetGBYlqdvJ4WDpcRRvyDFbm7tzX+7
         Tjp38E1zPFXILy/CgeSVQPHdOe4lYyhqEBWSA8RWdW+vzaiRUxd6qiXmEdnvuFnQkJi+
         LiB6krgfNNmVvJ+GpnLywOsGPSpL5j5MhmtMm6wxCIxf2Bx1OJgpJwmJ0OzehRr8FjTz
         eM10YGDoJk68IUupkb6iZLHMVxTY6IDKtS4cM7f+BF7w9q8fOXjr6JZfQdfsGLoJoa2k
         RyK7QlMshlBTUBDVLXPnM5vu4+af+oZZWWTUhCaGrtTEmNPzqVMBJN6EW40wM597tqsO
         W0JQ==
X-Gm-Message-State: APjAAAWX45PDma6zOEeJxpOhwrRiGDXiFNrpVgzJpHizkbj0PiE6pGFl
        mEGZ9VQCbHOjid7OcN1yf3PLs+X2NaztsyaVxxdI5Oqz6UQ=
X-Google-Smtp-Source: APXvYqxhSabd/hyuEYcLBOGRVREB6m6DYJMFp8FKIF0Qnt428skzzi5p9Z7nF9ixCih+8smwNx0vKyItV06fJD5/fBc=
X-Received: by 2002:a02:9203:: with SMTP id x3mr75869789jag.62.1578301690043;
 Mon, 06 Jan 2020 01:08:10 -0800 (PST)
MIME-Version: 1.0
References: <20200106090335.21717-1-matt.ranostay@konsulko.com>
In-Reply-To: <20200106090335.21717-1-matt.ranostay@konsulko.com>
From:   Matt Ranostay <matt.ranostay@konsulko.com>
Date:   Mon, 6 Jan 2020 17:07:58 +0800
Message-ID: <CAJCx=gnsfVV1egJ8BWzEMAWZnLHYw3qY7_t6MaRwnPJDLa+Z2Q@mail.gmail.com>
Subject: Re: [PATCH] iio: chemical: atlas-sensor: add DO-SM module support
To:     "open list:IIO SUBSYSTEM AND DRIVERS" <linux-iio@vger.kernel.org>
Cc:     Jonathan Cameron <jic23@kernel.org>, devicetree@vger.kernel.org
Content-Type: text/plain; charset="UTF-8"
Sender: linux-iio-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-iio.vger.kernel.org>
X-Mailing-List: linux-iio@vger.kernel.org

On Mon, Jan 6, 2020 at 5:04 PM Matt Ranostay <matt.ranostay@konsulko.com> wrote:
>
> Atlas Scientific DO-SM OEM sensor reads disolved oxygen in
> a solution. This is reported back as mg/L which maps directly
> to ppm and so the IIO_CONCENTRATION channel type can be used.
>
> Cc: devicetree@vger.kernel.org
> Signed-off-by: Matt Ranostay <matt.ranostay@konsulko.com>
> ---
>  .../bindings/iio/chemical/atlas,do-sm.txt     | 21 ++++++
>  drivers/iio/chemical/atlas-sensor.c           | 64 +++++++++++++++++--
>  2 files changed, 81 insertions(+), 4 deletions(-)
>  create mode 100644 Documentation/devicetree/bindings/iio/chemical/atlas,do-sm.txt
>
> diff --git a/Documentation/devicetree/bindings/iio/chemical/atlas,do-sm.txt b/Documentation/devicetree/bindings/iio/chemical/atlas,do-sm.txt
> new file mode 100644
> index 000000000000..fc741ea794c4
> --- /dev/null
> +++ b/Documentation/devicetree/bindings/iio/chemical/atlas,do-sm.txt
> @@ -0,0 +1,21 @@
> +* Atlas Scientific DO-SM OEM sensor
> +
> +http://www.atlas-scientific.com/_files/_datasheets/_oem/DO_oem_datasheet.pdf
> +
> +Required properties:
> +
> +  - compatible: must be "atlas,do-sm"
> +  - reg: the I2C address of the sensor
> +  - interrupts: the sole interrupt generated by the device
> +
> +  Refer to interrupt-controller/interrupts.txt for generic interrupt client
> +  node bindings.
> +
> +Example:
> +
> +atlas@64 {

Noticed this should be 67.. But won't submit a v2 till some feedback.

- Matt

> +       compatible = "atlas,do-sm";
> +       reg = <0x67>;
> +       interrupt-parent = <&gpio1>;
> +       interrupts = <16 2>;
> +};
> diff --git a/drivers/iio/chemical/atlas-sensor.c b/drivers/iio/chemical/atlas-sensor.c
> index 2f0a6fed2589..42ad1ed76144 100644
> --- a/drivers/iio/chemical/atlas-sensor.c
> +++ b/drivers/iio/chemical/atlas-sensor.c
> @@ -48,6 +48,11 @@
>  #define ATLAS_REG_EC_CALIB_STATUS_LOW          BIT(2)
>  #define ATLAS_REG_EC_CALIB_STATUS_HIGH         BIT(3)
>
> +#define ATLAS_REG_DO_CALIB_STATUS              0x09
> +#define ATLAS_REG_DO_CALIB_STATUS_MASK         0x03
> +#define ATLAS_REG_DO_CALIB_STATUS_PRESSURE     BIT(0)
> +#define ATLAS_REG_DO_CALIB_STATUS_DO           BIT(1)
> +
>  #define ATLAS_REG_PH_TEMP_DATA         0x0e
>  #define ATLAS_REG_PH_DATA              0x16
>
> @@ -60,14 +65,19 @@
>  #define ATLAS_REG_ORP_CALIB_STATUS     0x0d
>  #define ATLAS_REG_ORP_DATA             0x0e
>
> +#define ATLAS_REG_DO_TEMP_DATA         0x12
> +#define ATLAS_REG_DO_DATA              0x22
> +
>  #define ATLAS_PH_INT_TIME_IN_MS                450
>  #define ATLAS_EC_INT_TIME_IN_MS                650
>  #define ATLAS_ORP_INT_TIME_IN_MS       450
> +#define ATLAS_DO_INT_TIME_IN_MS                450
>
>  enum {
>         ATLAS_PH_SM,
>         ATLAS_EC_SM,
>         ATLAS_ORP_SM,
> +       ATLAS_DO_SM,
>  };
>
>  struct atlas_data {
> @@ -121,7 +131,7 @@ static const struct iio_chan_spec atlas_ph_channels[] = {
>         },
>  };
>
> -#define ATLAS_EC_CHANNEL(_idx, _addr) \
> +#define ATLAS_CONCENTRATION_CHANNEL(_idx, _addr) \
>         {\
>                 .type = IIO_CONCENTRATION, \
>                 .indexed = 1, \
> @@ -152,8 +162,8 @@ static const struct iio_chan_spec atlas_ec_channels[] = {
>                         .endianness = IIO_BE,
>                 },
>         },
> -       ATLAS_EC_CHANNEL(0, ATLAS_REG_TDS_DATA),
> -       ATLAS_EC_CHANNEL(1, ATLAS_REG_PSS_DATA),
> +       ATLAS_CONCENTRATION_CHANNEL(0, ATLAS_REG_TDS_DATA),
> +       ATLAS_CONCENTRATION_CHANNEL(1, ATLAS_REG_PSS_DATA),
>         IIO_CHAN_SOFT_TIMESTAMP(3),
>         {
>                 .type = IIO_TEMP,
> @@ -182,6 +192,19 @@ static const struct iio_chan_spec atlas_orp_channels[] = {
>         IIO_CHAN_SOFT_TIMESTAMP(1),
>  };
>
> +static const struct iio_chan_spec atlas_do_channels[] = {
> +       ATLAS_CONCENTRATION_CHANNEL(0, ATLAS_REG_DO_DATA),
> +       IIO_CHAN_SOFT_TIMESTAMP(1),
> +       {
> +               .type = IIO_TEMP,
> +               .address = ATLAS_REG_DO_TEMP_DATA,
> +               .info_mask_separate =
> +                       BIT(IIO_CHAN_INFO_RAW) | BIT(IIO_CHAN_INFO_SCALE),
> +               .output = 1,
> +               .scan_index = -1
> +       },
> +};
> +
>  static int atlas_check_ph_calibration(struct atlas_data *data)
>  {
>         struct device *dev = &data->client->dev;
> @@ -262,7 +285,31 @@ static int atlas_check_orp_calibration(struct atlas_data *data)
>                 dev_warn(dev, "device has not been calibrated\n");
>
>         return 0;
> -};
> +}
> +
> +static int atlas_check_do_calibration(struct atlas_data *data)
> +{
> +       struct device *dev = &data->client->dev;
> +       int ret;
> +       unsigned int val;
> +
> +       ret = regmap_read(data->regmap, ATLAS_REG_DO_CALIB_STATUS, &val);
> +       if (ret)
> +               return ret;
> +
> +       if (!(val & ATLAS_REG_DO_CALIB_STATUS_MASK)) {
> +               dev_warn(dev, "device has not been calibrated\n");
> +               return 0;
> +       }
> +
> +       if (!(val & ATLAS_REG_DO_CALIB_STATUS_PRESSURE))
> +               dev_warn(dev, "device missing atmospheric pressure calibration\n");
> +
> +       if (!(val & ATLAS_REG_DO_CALIB_STATUS_DO))
> +               dev_warn(dev, "device missing dissolved oxygen calibration\n");
> +
> +       return 0;
> +}
>
>  struct atlas_device {
>         const struct iio_chan_spec *channels;
> @@ -295,6 +342,13 @@ static struct atlas_device atlas_devices[] = {
>                                 .calibration = &atlas_check_orp_calibration,
>                                 .delay = ATLAS_ORP_INT_TIME_IN_MS,
>         },
> +       [ATLAS_DO_SM] = {
> +                               .channels = atlas_do_channels,
> +                               .num_channels = 3,
> +                               .data_reg = ATLAS_REG_DO_DATA,
> +                               .calibration = &atlas_check_do_calibration,
> +                               .delay = ATLAS_DO_INT_TIME_IN_MS,
> +       },
>  };
>
>  static int atlas_set_powermode(struct atlas_data *data, int on)
> @@ -507,6 +561,7 @@ static const struct i2c_device_id atlas_id[] = {
>         { "atlas-ph-sm", ATLAS_PH_SM},
>         { "atlas-ec-sm", ATLAS_EC_SM},
>         { "atlas-orp-sm", ATLAS_ORP_SM},
> +       { "atlas-do-sm", ATLAS_DO_SM},
>         {}
>  };
>  MODULE_DEVICE_TABLE(i2c, atlas_id);
> @@ -515,6 +570,7 @@ static const struct of_device_id atlas_dt_ids[] = {
>         { .compatible = "atlas,ph-sm", .data = (void *)ATLAS_PH_SM, },
>         { .compatible = "atlas,ec-sm", .data = (void *)ATLAS_EC_SM, },
>         { .compatible = "atlas,orp-sm", .data = (void *)ATLAS_ORP_SM, },
> +       { .compatible = "atlas,do-sm", .data = (void *)ATLAS_DO_SM, },
>         { }
>  };
>  MODULE_DEVICE_TABLE(of, atlas_dt_ids);
> --
> 2.20.1
>
